#include <array>
#include <iostream>
#include <string> 
#include <sstream>
#include <boost/asio.hpp>
#include "messages/MsgStatus.h"

using boost::asio::ip::tcp;

class TcpClient{
    boost::asio::io_context m_context;
    tcp::resolver m_resolver;
    tcp::resolver::results_type m_endpoints;
public:
    TcpClient(std::string host, unsigned int port_num) : m_context(), m_resolver(m_context)  {      
    }
    ~TcpClient(){

    }
    void send(MsgHeader& msg) {
        tcp::socket socket(m_context);
        tcp::resolver::results_type endpoints = m_resolver.resolve("127.0.0.1", "daytime");
        boost::asio::connect(socket, endpoints);        
        std::stringstream ss;

        std::cout << "Sending " << msg.length << " bytes" << std::endl;
        std::vector<char> buffer;
        msg.serialize(buffer);
        boost::asio::write(socket, boost::asio::buffer(buffer));

        const size_t max_buffer_size = 1024;  
        char temp_buffer[max_buffer_size];

        size_t total_bytes_read = 0;
        size_t bytes_received;

        buffer.clear();        
        buffer.resize(0);

        MsgHeader header(0, sizeof(MsgHeader));

        // Loop to read data in chunks
        while (true) {
            bytes_received = socket.read_some(boost::asio::buffer(temp_buffer, max_buffer_size));
            total_bytes_read += bytes_received;

            // Append the received data to the vector buffer
            buffer.insert(buffer.end(), temp_buffer, temp_buffer + bytes_received);

            std::cout << "Read " << bytes_received << " bytes, total: " << total_bytes_read << " bytes\n";

            header.deserialize(buffer);

            // Stop reading when we reach a certain condition (e.g., a complete message)
            // For this example, we'll stop after reading 1024 bytes
            if (total_bytes_read >= header.length) {
                break;
            }
        }

        if (header.id == MSG_STATUS_RESPONSE_ID)
        {
            MsgStatusResponse response;
            response.deserialize(buffer);
            std::cout << std::ctime(&response.timestamp) << std::endl;
        }
        else
        {
            std::cout << "Unknown response message" << std::endl;
        }
    }
};

int main(int argc, char* argv[])
{
    TcpClient client("127.0.0.1", 13);

    MsgStatusRequest status_request;
    client.send(status_request);
}